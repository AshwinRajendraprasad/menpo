from IPython.html.widgets import (ContainerWidget, IntSliderWidget,
                                  CheckboxWidget, ToggleButtonWidget,
                                  RadioButtonsWidget, IntTextWidget,
                                  DropdownWidget, LatexWidget, ButtonWidget,
                                  TextWidget, TabWidget, BoundedIntTextWidget,
                                  BoundedFloatTextWidget, TextareaWidget,
                                  ImageWidget, FloatSliderWidget)
from collections import OrderedDict
from StringIO import StringIO

from .utils import _convert_str_to_list_float, _convert_str_to_list_int


def logo(scale=0.3):
    r"""
    Creates a widget with Menpo Logo Image.

    The structure of the widgets is the following:
        logo.children = [logo_image_widget]

    To fix the alignment within this widget please refer to `format_logo()`
    function.

    Parameters
    ----------
    scale : `float`, optional
        Defines the scale that will be applied to the logo image
        (data/menpo_thumbnail.jpg).
    """
    import menpo.io as mio
    image = mio.import_builtin_asset.menpo_thumbnail_jpg()
    image = image.rescale(scale)
    logo_wid = ImageWidget(value=_convert_image_to_bytes(image))
    return ContainerWidget(children=[logo_wid])


def format_logo(logo_wid, container_border='1px solid black',
                border_visible=True):
    r"""
    Function that adds an optional border line arounf the logo widget. Usage
    example:
        logo_wid = logo()
        display(logo_wid)
        format_logo(logo_wid)

    Parameters
    ----------
    logo_wid :
        The widget object generated by the `logo()` function.

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    if border_visible:
        logo_wid.set_css('border', container_border)


def index_selection_slider(index_selection_default, plot_function=None,
                           update_function=None, description='Image Number:'):
    r"""
    Creates a widget for selecting an index. Specifically, it has:
        1) A slider.

    The structure of the widget is the following:
        index_wid = slider

    The returned widget saves the selected values in the following dictionary:
        index_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_index_selection()` function.

    Parameters
    ----------
    index_selection_default : `dict`
        The dictionary with the default options. For example:
            index_selection_default = {'min':0,
                                       'max':100,
                                       'step':1,
                                       'index':10}

    plot_function : `function` or None, optional
        The plot function that is executed when the index value changes.
        If None, then nothing is assigned.

    update_function : `function` or None, optional
        The update function that is executed when the index value changes.
        If None, then nothing is assigned.

    description : `str`, optional
        The title of the widget.
    """
    # Create widget
    index_wid = IntSliderWidget(min=index_selection_default['min'],
                                max=index_selection_default['max'],
                                value=index_selection_default['index'],
                                step=index_selection_default['step'],
                                description=description)

    # Assign output
    index_wid.selected_values = index_selection_default

    # Save index
    def save_index(name, value):
        index_wid.selected_values['index'] = value
    index_wid.on_trait_change(save_index, 'value')

    # assign given update_function
    if update_function is not None:
        index_wid.on_trait_change(update_function, 'value')

    # assign given plot_function
    if plot_function is not None:
        index_wid.on_trait_change(plot_function, 'value')

    return index_wid


def index_selection_buttons(index_selection_default, plot_function=None,
                            update_function=None, description='Image Number:',
                            minus_description='-', plus_description='+',
                            loop=True, text_editable=True):
    r"""
    Creates a widget for selecting an index. Specifically, it has:
        1) Two buttons to increase and decrease the index.
        2) A text area with the selected widget. It can either be editable or
           not.

    The structure of the widget is the following:
        index_wid = [title, minus_button, text, plus_button]

    The returned widget saves the selected values in the following dictionary:
        index_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_index_selection()` function.

    Parameters
    ----------
    index_selection_default : `dict`
        The dictionary with the default options. For example:
            index_selection_default = {'min':0,
                                       'max':100,
                                       'step':1,
                                       'index':10}

    plot_function : `function` or None, optional
        The plot function that is executed when the index value changes.
        If None, then nothing is assigned.

    update_function : `function` or None, optional
        The update function that is executed when the index value changes.
        If None, then nothing is assigned.

    description : `str`, optional
        The title of the widget.

    minus_description : `str`, optional
        The title of the button that decreases the index.

    plus_description : `str`, optional
        The title of the button that increases the index.

    loop : `boolean`, optional
        If True, if by pressing the buttons we reach the minimum/maximum index
        values, then the counting will continue from the end/beginning.
        If False, the counting will stop at the minimum/maximum value.

    text_editable : `boolean`, optional
        Flag that determines whether the index text will be editable.
    """
    # Create widgets
    tlt = LatexWidget(value=description)
    but_minus = ButtonWidget(description=minus_description)
    but_plus = ButtonWidget(description=plus_description)
    val = IntTextWidget(value=index_selection_default['index'],
                        disabled=not text_editable)
    index_wid = ContainerWidget(children=[tlt, but_minus, val, but_plus])

    # Assign output
    index_wid.selected_values = index_selection_default

    # plus button pressed
    def change_value_plus(name):
        tmp_val = int(val.value) + index_wid.selected_values['step']
        if tmp_val > index_wid.selected_values['max']:
            if loop:
                val.value = str(index_wid.selected_values['min'])
            else:
                val.value = str(index_wid.selected_values['max'])
        else:
            val.value = str(tmp_val)
    but_plus.on_click(change_value_plus)

    # minus button pressed
    def change_value_minus(name):
        tmp_val = int(val.value) - index_wid.selected_values['step']
        if tmp_val < index_wid.selected_values['min']:
            if loop:
                val.value = str(index_wid.selected_values['max'])
            else:
                val.value = str(index_wid.selected_values['min'])
        else:
            val.value = str(tmp_val)
    but_minus.on_click(change_value_minus)

    # Save index
    def save_index(name, old_value, value):
        tmp_val = int(value)
        if (tmp_val > index_wid.selected_values['max'] or
                tmp_val < index_wid.selected_values['min']):
            val.value = int(old_value)
        index_wid.selected_values['index'] = tmp_val
    val.on_trait_change(save_index, 'value')

    # assign given update_function
    if update_function is not None:
        val.on_trait_change(update_function, 'value')

    # assign given plot_function
    if plot_function is not None:
        val.on_trait_change(plot_function, 'value')

    return index_wid


def format_index_selection(index_wid, text_width='0.5cm'):
    r"""
    Function that corrects the align (style format) of a given index_selection
    widget. It can be used with both `index_selection_buttons()` and
    `index_selection_slider()` functions. Usage example:
        index_wid = index_selection_buttons()
        display(index_wid)
        format_index_selection(index_wid)

    Parameters
    ----------
    index_wid :
        The widget object generated by either the `index_selection_buttons()`
        or the `index_selection_slider()` function.

    text_width : `str`, optional
        The width of the index text area in the case of
        `index_selection_buttons()`.
    """
    if not isinstance(index_wid, IntSliderWidget):
        # align all widgets
        index_wid.remove_class('vbox')
        index_wid.add_class('hbox')
        index_wid.add_class('align-center')

        # set text width
        index_wid.children[2].set_css('width', text_width)
        index_wid.children[2].add_class('center')

        # set margins
        index_wid.children[0].set_css('margin-right', '6px')


def update_index_selection(index_wid, index_selection_default,
                           plot_function=None, update_function=None):
    r"""
    Function that updates the state of a given index_selection widget if the
    index bounds have changed. It can be used with both
    `index_selection_buttons()` and `index_selection_slider()` functions. Usage
    example:
        index_selection_default = {'min':0,
                                   'max':100,
                                   'step':1,
                                   'index':10}
        index_wid = index_selection_buttons(index_selection_default)
        display(index_wid)
        format_index_selection(index_wid)
        index_selection_default = {'min':0,
                                   'max':10,
                                   'step':5,
                                   'index':5}
        update_index_selection(index_wid, index_selection_default)

    Parameters
    ----------
    index_wid :
        The widget object generated by either the `index_selection_buttons()`
        or the `index_selection_slider()` function.

    index_selection_default : `dict`
        The dictionary with the default options. For example:
            index_selection_default = {'min':0,
                                       'max':100,
                                       'step':1,
                                       'index':10}

    plot_function : `function` or None, optional
        The plot function that is executed when the index value changes.
        If None, then nothing is assigned.

    update_function : `function` or None, optional
        The update function that is executed when the index value changes.
        If None, then nothing is assigned.
    """
    # check if update is required
    if not (index_selection_default['min'] == index_wid.selected_values['min'] and
            index_selection_default['max'] == index_wid.selected_values['max'] and
            index_selection_default['step'] == index_wid.selected_values['step'] and
            index_selection_default['index'] == index_wid.selected_values['index']):
        if isinstance(index_wid, IntSliderWidget):
            # created by `index_selection_slider()` function
            index_wid.min = index_selection_default['min']
            index_wid.max = index_selection_default['max']
            index_wid.step = index_selection_default['step']
            index_wid.value = index_selection_default['index']
            # assign given update_function
            if update_function is not None:
                index_wid.on_trait_change(update_function, 'value')
            # assign given plot_function
            if plot_function is not None:
                index_wid.on_trait_change(plot_function, 'value')
        else:
            # created by `index_selection_buttons()` function
            index_wid.children[2].value = str(index_selection_default['index'])
            # assign given update_function
            if update_function is not None:
                index_wid.children[2].on_trait_change(update_function, 'value')
            # assign given plot_function
            if plot_function is not None:
                index_wid.children[2].on_trait_change(plot_function, 'value')

    # Assign new options dict to selected_values
    index_wid.selected_values = index_selection_default


def colour_selection(default_colour_list, plot_function=None, title='Colour'):
    r"""
    Creates a widget with Colour Selection Options. Specifically, it has:
        1) A drop down menu with predefined colours and a 'custom' entry.
        2) If 'custom is selected, then three float text boxes appear to enter
        the desired RGB values.

    The structure of the widgets is the following:
        colour_selection_wid.children = [drop_down_menu, rgb]
        rgb.children = [r_value, g_value, b_value]

    The returned widget saves the selected values in the following list:
        colour_selection_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_colour_selection()` function.

    To update the state of this widget, please refer to
    `update_colour_selection()` function.

    Parameters
    ----------
    default_colour_list : `list` of `str` or `list` of `float`
        If `str`, it must be one of {'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'}.
        If `list`, it defines an RGB value and must have length 3.

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    title : `str`, optional
        The description of the drop down menu.
    """
    # colours dictionary
    colour_dict = OrderedDict()
    colour_dict['blue'] = 'b'
    colour_dict['green'] = 'g'
    colour_dict['red'] = 'r'
    colour_dict['cyan'] = 'c'
    colour_dict['magenta'] = 'm'
    colour_dict['yellow'] = 'y'
    colour_dict['black'] = 'k'
    colour_dict['white'] = 'w'
    colour_dict['custom'] = 'custom'

    # find default values
    default_colour = default_colour_list[0]
    r_val = g_val = b_val = 0.
    if not isinstance(default_colour, str):
        r_val = default_colour[0]
        g_val = default_colour[1]
        b_val = default_colour[2]
        default_colour = 'custom'

    # create widgets
    r_wid = BoundedFloatTextWidget(value=r_val, description='RGB', min=0.0,
                                   max=1.0)
    g_wid = BoundedFloatTextWidget(value=g_val, min=0.0, max=1.0)
    b_wid = BoundedFloatTextWidget(value=b_val, min=0.0, max=1.0)
    menu = DropdownWidget(values=colour_dict, value=default_colour,
                          description=title)
    rgb = ContainerWidget(children=[r_wid, g_wid, b_wid])
    colour_selection_wid = ContainerWidget(children=[menu, rgb])

    # control visibility
    def show_rgb(name, value):
        if value == 'custom':
            rgb.visible = True
        else:
            rgb.visible = False
    show_rgb('', default_colour)
    menu.on_trait_change(show_rgb, 'value')

    # get colour
    colour_selection_wid.selected_values = default_colour_list

    def get_colour(name, value):
        if menu.value == 'custom':
            colour_selection_wid.selected_values[0] = [r_wid.value, g_wid.value,
                                                       b_wid.value]
        else:
            colour_selection_wid.selected_values[0] = value
    menu.on_trait_change(get_colour, 'value')
    r_wid.on_trait_change(get_colour, 'value')
    g_wid.on_trait_change(get_colour, 'value')
    b_wid.on_trait_change(get_colour, 'value')

    # assign plot function
    if plot_function is not None:
        menu.on_trait_change(plot_function, 'value')
        r_wid.on_trait_change(plot_function, 'value')
        g_wid.on_trait_change(plot_function, 'value')
        b_wid.on_trait_change(plot_function, 'value')

    return colour_selection_wid


def format_colour_selection(colour_selection_wid):
    r"""
    Function that corrects the align (style format) of a given colour_selection
    widget. Usage example:
        colour_selection_wid = colour_selection(['r'])
        display(colour_selection_wid)
        format_colour_selection(colour_selection_wid)

    Parameters
    ----------
    colour_selection_wid :
        The widget object generated by the `colour_selection()` function.
    """
    # align r, g, b values
    colour_selection_wid.children[1].remove_class('vbox')
    colour_selection_wid.children[1].add_class('hbox')
    colour_selection_wid.children[1].add_class('align-start')

    # set width of r, g, b
    colour_selection_wid.children[1].children[0].set_css('width', '0.5cm')
    colour_selection_wid.children[1].children[1].set_css('width', '0.5cm')
    colour_selection_wid.children[1].children[2].set_css('width', '0.5cm')

    # align drop down menu with r, g, b values
    colour_selection_wid.add_class('align-end')


def update_colour_selection(colour_selection_wid, default_colour_list):
    r"""
    Function that updates the state of a given colour_selection widget. Usage
    example:
        colour_selection_wid = colour_selection(default_colour_list='r')
        display(colour_selection_wid)
        format_colour_selection(colour_selection_wid)
        update_colour_selection(colour_selection_wid,
                                default_colour_list=[0.5, 0.7, 1.0])

    Parameters
    ----------
    colour_selection_wid :
        The widget object generated by the `colour_selection()` function.

    default_colour : `list` of `str` or `list` of `float`
        If `str`, it must be one of {'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'}.
        If `list`, it defines an RGB value and must have length 3.
    """
    colour_selection_wid.selected_values = default_colour_list
    default_colour = default_colour_list[0]
    if not isinstance(default_colour, str):
        r_val = default_colour[0]
        g_val = default_colour[1]
        b_val = default_colour[2]
        default_colour = 'custom'
        colour_selection_wid.children[1].children[0].value = r_val
        colour_selection_wid.children[1].children[1].value = g_val
        colour_selection_wid.children[1].children[2].value = b_val
    colour_selection_wid.children[0].value = default_colour


def line_options(line_options_default, plot_function=None,
                 toggle_show_visible=True, toggle_show_default=True,
                 toggle_title='Line Object', show_checkbox_title='Show line'):
    r"""
    Creates a widget with Line Options. Specifically, it has:
        1) A checkbox that controls line's visibility.
        2) A dropdown menu for line style.
        3) A bounded float text box for line width.
        4) A colour_selection widget for line colour.
        7) A toggle button that controls the visibility of all the above, i.e.
           the line options.

    The structure of the widgets is the following:
        line_options_wid.children = [toggle_button, options]
        options.children = [show_line_checkbox, other_options]
        other_options.children = [linestyle, linewidth, linecolour]

    The returned widget saves the selected values in the following dictionary:
        line_options_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_line_options()` function.

    Parameters
    ----------
    line_options_default : `dict`
        The initial selected line options.
        Example:
            line_options={'show_line': True,
                          'linewidth': 1,
                          'linecolour': ['b'],
                          'linestyle': '-'}

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.

    toggle_title : `str`, optional
        The title of the toggle button.

    show_checkbox_title : `str`, optional
        The description of the show line checkbox.
    """
    # Create widgets
    # toggle button
    but = ToggleButtonWidget(description=toggle_title,
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # linestyle, linewidth, linecolour
    show_line = CheckboxWidget(description=show_checkbox_title,
                               value=line_options_default['show_line'])
    linewidth = BoundedFloatTextWidget(description='Width',
                                       value=line_options_default['linewidth'],
                                       min=0.5)
    linestyle_dict = OrderedDict()
    linestyle_dict['solid'] = '-'
    linestyle_dict['dashed'] = '--'
    linestyle_dict['dash-dot'] = '-.'
    linestyle_dict['dotted'] = ':'
    linestyle = DropdownWidget(values=linestyle_dict,
                               value=line_options_default['linestyle'],
                               description='Style')
    linecolour = colour_selection(line_options_default['linecolour'],
                                  title='Colour')

    # Options widget
    line_options = ContainerWidget(children=[linestyle, linewidth, linecolour])
    options_wid = ContainerWidget(children=[show_line, line_options])

    # Final widget
    line_options_wid = ContainerWidget(children=[but, options_wid])

    # Assign output
    line_options_wid.selected_values = line_options_default

    # line options visibility
    def options_visible(name, value):
        linestyle.disabled = not value
        linewidth.disabled = not value
        linecolour.children[0].disabled = not value
        linecolour.children[1].children[0].disabled = not value
        linecolour.children[1].children[1].disabled = not value
        linecolour.children[1].children[2].disabled = not value
    options_visible('', line_options_default['show_line'])
    show_line.on_trait_change(options_visible, 'value')

    # get options functions
    def save_show_line(name, value):
        line_options_wid.selected_values['show_line'] = value
    show_line.on_trait_change(save_show_line, 'value')

    def save_linewidth(name, value):
        line_options_wid.selected_values['linewidth'] = float(value)
    linewidth.on_trait_change(save_linewidth, 'value')

    def save_linestyle(name, value):
        line_options_wid.selected_values['linestyle'] = value
    linestyle.on_trait_change(save_linestyle, 'value')

    line_options_wid.selected_values['linecolour'] = linecolour.selected_values

    # Toggle button function
    def toggle_fun(name, value):
        options_wid.visible = value
    toggle_fun('', toggle_show_default)
    but.on_trait_change(toggle_fun, 'value')

    # assign plot_function
    if plot_function is not None:
        show_line.on_trait_change(plot_function, 'value')
        linestyle.on_trait_change(plot_function, 'value')
        linewidth.on_trait_change(plot_function, 'value')
        linecolour.children[0].on_trait_change(plot_function, 'value')
        linecolour.children[1].children[0].on_trait_change(plot_function,
                                                           'value')
        linecolour.children[1].children[1].on_trait_change(plot_function,
                                                           'value')
        linecolour.children[1].children[2].on_trait_change(plot_function,
                                                           'value')

    return line_options_wid


def format_line_options(line_options_wid, container_padding='6px',
                        container_margin='6px',
                        container_border='1px solid black',
                        toggle_button_font_weight='bold', border_visible=True,
                        suboptions_border_visible=True):
    r"""
    Function that corrects the align (style format) of a given line_options
    widget. Usage example:
        line_options_wid = line_options()
        display(line_options_wid)
        format_line_options(line_options_wid)

    Parameters
    ----------
    line_options_wid :
        The widget object generated by the `line_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.

    suboptions_border_visible : `boolean`, optional
        Defines whether to draw the border line around the line options, under
        the show line checkbox.
    """
    # align line options with checkbox
    line_options_wid.children[1].add_class('align-end')

    # set linewidth text box width
    line_options_wid.children[1].children[1].children[1].set_css('width', '1cm')

    # format colour options
    format_colour_selection(line_options_wid.children[1].children[1].children[2])

    # border around options
    if suboptions_border_visible:
        line_options_wid.children[1].children[1].set_css('border',
                                                         container_border)

    # set toggle button font bold
    line_options_wid.children[0].set_css('font-weight',
                                         toggle_button_font_weight)

    # margin and border around container widget
    line_options_wid.set_css('padding', container_padding)
    line_options_wid.set_css('margin', container_margin)
    if border_visible:
        line_options_wid.set_css('border', container_border)


def update_line_options(line_options_wid, line_options_dict):
    r"""
    Function that updates the state of a given line_options widget. Usage
    example:
        default_line_options={'show_line':True,
                              'linewidth':2,
                              'linecolour':['r'],
                              'linestyle':'-'}
        line_options_wid = line_options(default_line_options)
        display(line_options_wid)
        format_line_options(line_options_wid)
        default_line_options={'show_line':False,
                              'linewidth':4,
                              'linecolour':[[0.1, 0.2, 0.3]],
                              'linestyle':'-'}
        update_line_options(line_options_wid, default_line_options)

    Parameters
    ----------
    line_options_wid :
        The widget object generated by the `line_options()` function.

    line_options_dict : `dict`
        The new set of options. For example:
            line_options_dict={'show_line':True,
                               'linewidth':2,
                               'linecolour':['r'],
                               'linestyle':'-'}
    """
    # Assign new options dict to selected_values
    line_options_wid.selected_values = line_options_dict

    # update show line checkbox
    if 'show_line' in line_options_dict.keys():
        line_options_wid.children[1].children[0].value = \
            line_options_dict['show_line']

    # update linestyle dropdown menu
    if 'linestyle' in line_options_dict.keys():
        line_options_wid.children[1].children[1].children[0].value = \
            line_options_dict['linestyle']

    # update linewidth text box
    if 'linewidth' in line_options_dict.keys():
        line_options_wid.children[1].children[1].children[1].value = \
            float(line_options_dict['linewidth'])

    # update linecolour
    if 'linecolour' in line_options_dict.keys():
        update_colour_selection(
            line_options_wid.children[1].children[1].children[2],
            line_options_dict['linecolour'])


def marker_options(marker_options_default, plot_function=None,
                   toggle_show_visible=True, toggle_show_default=True,
                   toggle_title='Marker Object',
                   show_checkbox_title='Show markers'):
    r"""
    Creates a widget with Marker Options. Specifically, it has:
        1) A checkbox that controls marker's visibility.
        2) A dropdown menu for marker style.
        3) A bounded int text box for marker size.
        4) A bounded float text box for marker edge width.
        5) A colour_selection widget for face colour.
        6) A colour_selection widget for edge colour.
        7) A toggle button that controls the visibility of all the above, i.e.
           the marker options.

    The structure of the widgets is the following:
        marker_options_wid.children = [toggle_button, options]
        options.children = [show_marker_checkbox, other_options]
        other_options.children = [markerstyle, markersize, markeredgewidth,
                                  facecolour, edgecolour]

    The returned widget saves the selected values in the following dictionary:
        marker_options_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_marker_options()` function.

    Parameters
    ----------
    marker_options_default : `dict`
        The initial selected marker options.
        Example:
            marker_options_default={'show_marker':True,
                                    'markersize':20,
                                    'markerfacecolour':['r'],
                                    'markeredgecolour':['k'],
                                    'markerstyle':'o',
                                    'markeredgewidth':1}

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.

    toggle_title : `str`, optional
        The title of the toggle button.

    show_checkbox_title : `str`, optional
        The description of the show marker checkbox.
    """
    # Create widgets
    # toggle button
    but = ToggleButtonWidget(description=toggle_title,
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # linestyle, linewidth, linecolour
    show_marker = CheckboxWidget(description=show_checkbox_title,
                                 value=marker_options_default['show_marker'])
    markersize = BoundedIntTextWidget(
        description='Size', value=marker_options_default['markersize'], min=1)
    markeredgewidth = BoundedFloatTextWidget(
        description='Edge width',
        value=marker_options_default['markeredgewidth'], min=0.5)
    markerstyle_dict = OrderedDict()
    markerstyle_dict['point'] = '.'
    markerstyle_dict['pixel'] = ','
    markerstyle_dict['circle'] = 'o'
    markerstyle_dict['triangle down'] = 'v'
    markerstyle_dict['triangle up'] = '^'
    markerstyle_dict['triangle left'] = '<'
    markerstyle_dict['triangle right'] = '>'
    markerstyle_dict['tri down'] = '1'
    markerstyle_dict['tri up'] = '2'
    markerstyle_dict['tri left'] = '3'
    markerstyle_dict['tri right'] = '4'
    markerstyle_dict['octagon'] = '8'
    markerstyle_dict['square'] = 's'
    markerstyle_dict['pentagon'] = 'p'
    markerstyle_dict['star'] = '*'
    markerstyle_dict['hexagon 1'] = 'h'
    markerstyle_dict['hexagon 2'] = 'H'
    markerstyle_dict['plus'] = '+'
    markerstyle_dict['x'] = 'x'
    markerstyle_dict['diamond'] = 'D'
    markerstyle_dict['thin diamond'] = 'd'
    markerstyle = DropdownWidget(values=markerstyle_dict,
                                 value=marker_options_default['markerstyle'],
                                 description='Style')
    markerfacecolour = colour_selection(
        marker_options_default['markerfacecolour'], title='Face Colour')
    markeredgecolour = colour_selection(
        marker_options_default['markeredgecolour'], title='Edge Colour')

    # Options widget
    marker_options = ContainerWidget(children=[markerstyle, markersize,
                                               markeredgewidth,
                                               markerfacecolour,
                                               markeredgecolour])
    options_wid = ContainerWidget(children=[show_marker, marker_options])

    # Final widget
    marker_options_wid = ContainerWidget(children=[but, options_wid])

    # Assign output
    marker_options_wid.selected_values = marker_options_default

    # marker options visibility
    def options_visible(name, value):
        markerstyle.disabled = not value
        markersize.disabled = not value
        markeredgewidth.disabled = not value
        markerfacecolour.children[0].disabled = not value
        markerfacecolour.children[1].children[0].disabled = not value
        markerfacecolour.children[1].children[1].disabled = not value
        markerfacecolour.children[1].children[2].disabled = not value
        markeredgecolour.children[0].disabled = not value
        markeredgecolour.children[1].children[0].disabled = not value
        markeredgecolour.children[1].children[1].disabled = not value
        markeredgecolour.children[1].children[2].disabled = not value
    options_visible('', marker_options_default['show_marker'])
    show_marker.on_trait_change(options_visible, 'value')

    # get options functions
    def save_show_marker(name, value):
        marker_options_wid.selected_values['show_marker'] = value
    show_marker.on_trait_change(save_show_marker, 'value')

    def save_markersize(name, value):
        marker_options_wid.selected_values['markersize'] = int(value)
    markersize.on_trait_change(save_markersize, 'value')

    def save_markeredgewidth(name, value):
        marker_options_wid.selected_values['markeredgewidth'] = float(value)
    markeredgewidth.on_trait_change(save_markeredgewidth, 'value')

    def save_markerstyle(name, value):
        marker_options_wid.selected_values['markerstyle'] = value
    markerstyle.on_trait_change(save_markerstyle, 'value')

    marker_options_wid.selected_values['markeredgecolour'] = \
        markeredgecolour.selected_values
    marker_options_wid.selected_values['markerfacecolour'] = \
        markerfacecolour.selected_values

    # Toggle button function
    def toggle_fun(name, value):
        options_wid.visible = value
    toggle_fun('', toggle_show_default)
    but.on_trait_change(toggle_fun, 'value')

    # assign plot_function
    if plot_function is not None:
        show_marker.on_trait_change(plot_function, 'value')
        markerstyle.on_trait_change(plot_function, 'value')
        markeredgewidth.on_trait_change(plot_function, 'value')
        markersize.on_trait_change(plot_function, 'value')
        markerfacecolour.children[0].on_trait_change(plot_function, 'value')
        markerfacecolour.children[1].children[0].on_trait_change(plot_function,
                                                                 'value')
        markerfacecolour.children[1].children[1].on_trait_change(plot_function,
                                                                 'value')
        markerfacecolour.children[1].children[2].on_trait_change(plot_function,
                                                                 'value')
        markeredgecolour.children[0].on_trait_change(plot_function, 'value')
        markeredgecolour.children[1].children[0].on_trait_change(plot_function,
                                                                 'value')
        markeredgecolour.children[1].children[1].on_trait_change(plot_function,
                                                                 'value')
        markeredgecolour.children[1].children[2].on_trait_change(plot_function,
                                                                 'value')

    return marker_options_wid


def format_marker_options(marker_options_wid, container_padding='6px',
                          container_margin='6px',
                          container_border='1px solid black',
                          toggle_button_font_weight='bold', border_visible=True,
                          suboptions_border_visible=True):
    r"""
    Function that corrects the align (style format) of a given marker_options
    widget. Usage example:
        marker_options_wid = marker_options()
        display(marker_options_wid)
        format_marker_options(marker_options_wid)

    Parameters
    ----------
    marker_options_wid :
        The widget object generated by the `marker_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.

    suboptions_border_visible : `boolean`, optional
        Defines whether to draw the border line around the marker options, under
        the show marker checkbox.
    """
    # align marker options with checkbox
    marker_options_wid.children[1].add_class('align-end')

    # set text boxes width
    marker_options_wid.children[1].children[1].children[1].set_css('width',
                                                                   '1cm')
    marker_options_wid.children[1].children[1].children[2].set_css('width',
                                                                   '1cm')

    # border around options
    if suboptions_border_visible:
        marker_options_wid.children[1].children[1].set_css('border',
                                                           container_border)

    # format colour options
    format_colour_selection(marker_options_wid.children[1].children[1].children[3])
    format_colour_selection(marker_options_wid.children[1].children[1].children[4])

    # set toggle button font bold
    marker_options_wid.children[0].set_css('font-weight',
                                           toggle_button_font_weight)

    # margin and border around container widget
    marker_options_wid.set_css('padding', container_padding)
    marker_options_wid.set_css('margin', container_margin)
    if border_visible:
        marker_options_wid.set_css('border', container_border)


def update_marker_options(marker_options_wid, marker_options_dict):
    r"""
    Function that updates the state of a given marker_options widget. Usage
    example:
        default_marker_options={'show_marker':True,
                                'markersize':20,
                                'markerfacecolour':['r'],
                                'markeredgecolour':['k'],
                                'markerstyle':'o',
                                'markeredgewidth':1}
        marker_options_wid = marker_options(default_marker_options)
        display(marker_options_wid)
        format_marker_options(marker_options_wid)
        default_marker_options={'show_marker':True,
                                'markersize':40,
                                'markerfacecolour':[[0.1, 0.2, 0.3]],
                                'markeredgecolour':['r'],
                                'markerstyle':'d',
                                'markeredgewidth':1}
        update_marker_options(marker_options_wid, default_marker_options)

    Parameters
    ----------
    marker_options_wid :
        The widget object generated by the `marker_options()` function.

    marker_options_dict : `dict`
        The new set of options. For example:
            marker_options_dict={'show_marker':True,
                                 'markersize':20,
                                 'markerfacecolour':['r'],
                                 'markeredgecolour':['k'],
                                 'markerstyle':'o',
                                 'markeredgewidth':1}
    """
    # Assign new options dict to selected_values
    marker_options_wid.selected_values = marker_options_dict

    # update show marker checkbox
    if 'show_marker' in marker_options_dict.keys():
        marker_options_wid.children[1].children[0].value = \
            marker_options_dict['show_marker']

    # update markerstyle dropdown menu
    if 'markerstyle' in marker_options_dict.keys():
        marker_options_wid.children[1].children[1].children[0].value = \
            marker_options_dict['markerstyle']

    # update markersize text box
    if 'markersize' in marker_options_dict.keys():
        marker_options_wid.children[1].children[1].children[1].value = \
            int(marker_options_dict['markersize'])

    # update markeredgewidth text box
    if 'markeredgewidth' in marker_options_dict.keys():
        marker_options_wid.children[1].children[1].children[2].value = \
            float(marker_options_dict['markeredgewidth'])

    # update markerfacecolour
    if 'markerfacecolour' in marker_options_dict.keys():
        update_colour_selection(
            marker_options_wid.children[1].children[1].children[3],
            marker_options_dict['markerfacecolour'])

    # update markeredgecolour
    if 'markeredgecolour' in marker_options_dict.keys():
        update_colour_selection(
            marker_options_wid.children[1].children[1].children[4],
            marker_options_dict['markeredgecolour'])


def font_options(font_options_default, plot_function=None,
                 toggle_show_visible=True, toggle_show_default=True,
                 toggle_title='Font Options', show_checkbox_title='Show text'):
    r"""
    Creates a widget with Line Options. Specifically, it has:
        1) A checkbox that controls text's visibility.
        2) A dropdown menu for font name.
        3) A bounded int text box for font size.
        4) A dropdown menu for font style.
        5) A dropdown menu for font weight.
        6) A colour_selection widget for font colour.
        7) A toggle button that controls the visibility of all the above, i.e.
           the font options.

    The structure of the widgets is the following:
        line_options_wid.children = [toggle_button, options]
        options.children = [show_font_checkbox, other_options]
        other_options.children = [fontname, fontsize, fontstyle, fontweight,
                                  fontcolour]

    The returned widget saves the selected values in the following dictionary:
        font_options_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_font_options()` function.

    Parameters
    ----------
    font_options_default : `dict`
        The initial selected font options.
        Example:
            font_options={'show_font': True,
                          'fontname': 'serif',
                          'fontsize': 10,
                          'fontstyle': 'normal',
                          'fontweight': 'normal',
                          'fontcolour': ['k']}

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.

    toggle_title : `str`, optional
        The title of the toggle button.

    show_checkbox_title : `str`, optional
        The description of the show text checkbox.
    """
    #Create widgets
    # toggle button
    but = ToggleButtonWidget(description=toggle_title,
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # fontname, fontsize, fontstyle, fontweight, fontcolour
    show_font = CheckboxWidget(description=show_checkbox_title,
                               value=font_options_default['show_font'])
    fontname_dict = OrderedDict()
    fontname_dict['serif'] = 'serif'
    fontname_dict['sans-serif'] = 'sans-serif'
    fontname_dict['cursive'] = 'cursive'
    fontname_dict['fantasy'] = 'fantasy'
    fontname_dict['monospace'] = 'monospace'
    fontname = DropdownWidget(values=fontname_dict,
                              value=font_options_default['fontname'],
                              description='Font')
    fontsize = BoundedIntTextWidget(description='Size',
                                    value=font_options_default['fontsize'],
                                    min=2)
    fontstyle_dict = OrderedDict()
    fontstyle_dict['normal'] = 'normal'
    fontstyle_dict['italic'] = 'italic'
    fontstyle_dict['oblique'] = 'oblique'
    fontstyle = DropdownWidget(values=fontstyle_dict,
                               value=font_options_default['fontstyle'],
                               description='Style')
    fontweight_dict = OrderedDict()
    fontweight_dict['normal'] = 'normal'
    fontweight_dict['ultralight'] = 'ultralight'
    fontweight_dict['light'] = 'light'
    fontweight_dict['regular'] = 'regular'
    fontweight_dict['book'] = 'book'
    fontweight_dict['medium'] = 'medium'
    fontweight_dict['roman'] = 'roman'
    fontweight_dict['semibold'] = 'semibold'
    fontweight_dict['demibold'] = 'demibold'
    fontweight_dict['demi'] = 'demi'
    fontweight_dict['bold'] = 'bold'
    fontweight_dict['heavy'] = 'heavy'
    fontweight_dict['extra bold'] = 'extra bold'
    fontweight_dict['black'] = 'black'
    fontweight = DropdownWidget(values=fontweight_dict,
                                value=font_options_default['fontweight'],
                                description='Weight')
    fontcolour = colour_selection(font_options_default['fontcolour'],
                                  title='Colour')

    # Options widget
    font_options = ContainerWidget(children=[fontname, fontsize, fontstyle,
                                             fontweight, fontcolour])
    options_wid = ContainerWidget(children=[show_font, font_options])

    # Final widget
    font_options_wid = ContainerWidget(children=[but, options_wid])

    # Assign output
    font_options_wid.selected_values = font_options_default

    # font options visibility
    def options_visible(name, value):
        fontname.disabled = not value
        fontsize.disabled = not value
        fontstyle.disabled = not value
        fontweight.disabled = not value
        fontcolour.children[0].disabled = not value
        fontcolour.children[1].children[0].disabled = not value
        fontcolour.children[1].children[1].disabled = not value
        fontcolour.children[1].children[2].disabled = not value
    options_visible('', font_options_default['show_font'])
    show_font.on_trait_change(options_visible, 'value')

    # get options functions
    def save_show_font(name, value):
        font_options_wid.selected_values['show_font'] = value
    show_font.on_trait_change(save_show_font, 'value')

    def save_fontname(name, value):
        font_options_wid.selected_values['fontname'] = value
    fontname.on_trait_change(save_fontname, 'value')

    def save_fontsize(name, value):
        font_options_wid.selected_values['fontsize'] = int(value)
    fontsize.on_trait_change(save_fontsize, 'value')

    def save_fontstyle(name, value):
        font_options_wid.selected_values['fontstyle'] = value
    fontstyle.on_trait_change(save_fontstyle, 'value')

    def save_fontweight(name, value):
        font_options_wid.selected_values['fontweight'] = value
    fontweight.on_trait_change(save_fontweight, 'value')

    font_options_wid.selected_values['fontcolour'] = fontcolour.selected_values

    # Toggle button function
    def toggle_fun(name, value):
        options_wid.visible = value
    toggle_fun('', toggle_show_default)
    but.on_trait_change(toggle_fun, 'value')

    # assign plot_function
    if plot_function is not None:
        show_font.on_trait_change(plot_function, 'value')
        fontstyle.on_trait_change(plot_function, 'value')
        fontsize.on_trait_change(plot_function, 'value')
        fontweight.on_trait_change(plot_function, 'value')
        fontcolour.children[0].on_trait_change(plot_function, 'value')
        fontcolour.children[1].children[0].on_trait_change(plot_function,
                                                           'value')
        fontcolour.children[1].children[1].on_trait_change(plot_function,
                                                           'value')
        fontcolour.children[1].children[2].on_trait_change(plot_function,
                                                           'value')

    return font_options_wid


def format_font_options(font_options_wid, container_padding='6px',
                        container_margin='6px',
                        container_border='1px solid black',
                        toggle_button_font_weight='bold', border_visible=True,
                        suboptions_border_visible=True):
    r"""
    Function that corrects the align (style format) of a given font_options
    widget. Usage example:
        font_options_wid = font_options()
        display(font_options_wid)
        format_font_options(font_options_wid)

    Parameters
    ----------
    font_options_wid :
        The widget object generated by the `font_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.

    suboptions_border_visible : `boolean`, optional
        Defines whether to draw the border line around the line options, under
        the show line checkbox.
    """
    # align font options with checkbox
    font_options_wid.children[1].add_class('align-end')

    # set fontsize text box width
    font_options_wid.children[1].children[1].children[1].set_css('width', '1cm')

    # format colour options
    format_colour_selection(font_options_wid.children[1].children[1].children[4])

    # border around options
    if suboptions_border_visible:
        font_options_wid.children[1].children[1].set_css('border',
                                                         container_border)

    # set toggle button font bold
    font_options_wid.children[0].set_css('font-weight',
                                         toggle_button_font_weight)

    # margin and border around container widget
    font_options_wid.set_css('padding', container_padding)
    font_options_wid.set_css('margin', container_margin)
    if border_visible:
        font_options_wid.set_css('border', container_border)


def update_font_options(font_options_wid, font_options_dict):
    r"""
    Function that updates the state of a given font_options widget. Usage
    example:
        font_options_default={'show_font': True,
                              'fontname': 'serif',
                              'fontsize': 10,
                              'fontstyle': 'normal',
                              'fontweight': 'normal',
                              'fontcolour': ['k']}
        font_options_wid = font_options(font_options)
        display(font_options_wid)
        format_font_options(font_options_wid)
        font_options_default={'show_font': False,
                              'fontname': 'sans-serif',
                              'fontsize': 14,
                              'fontstyle': 'italic',
                              'fontweight': 'bold',
                              'fontcolour': ['r']}
        update_font_options(font_options_wid, font_options)

    Parameters
    ----------
    font_options_wid :
        The widget object generated by the `font_options()` function.

    font_options_dict : `dict`
        The new set of options. For example:
            font_options_dict={'show_font': True,
                               'fontname': 'serif',
                               'fontsize': 10,
                               'fontstyle': 'normal',
                               'fontweight': 'normal',
                               'fontcolour': ['k']}
    """
    # Assign new options dict to selected_values
    font_options_wid.selected_values = font_options_dict

    # update show font checkbox
    if 'show_font' in font_options_dict.keys():
        font_options_wid.children[1].children[0].value = \
            font_options_dict['show_font']

    # update fontname dropdown menu
    if 'fontname' in font_options_dict.keys():
        font_options_wid.children[1].children[1].children[0].value = \
            font_options_dict['fontname']

    # update fontsize text box
    if 'fontsize' in font_options_dict.keys():
        font_options_wid.children[1].children[1].children[1].value = \
            int(font_options_dict['fontsize'])

    # update fontstyle dropdown menu
    if 'fontstyle' in font_options_dict.keys():
        font_options_wid.children[1].children[1].children[2].value = \
            font_options_dict['fontstyle']

    # update fontweight dropdown menu
    if 'fontweight' in font_options_dict.keys():
        font_options_wid.children[1].children[1].children[3].value = \
            font_options_dict['fontweight']

    # update fontcolour
    if 'fontcolour' in font_options_dict.keys():
        update_colour_selection(
            font_options_wid.children[1].children[1].children[4],
            font_options_dict['fontcolour'])


def figure_options(figure_options_default, plot_function=None,
                   figure_scale_bounds=(0.1, 2), figure_scale_step=0.1,
                   figure_scale_visible=True, show_axes_visible=True,
                   toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget with Figure Options. Specifically, it has:
        1) A slider that controls the scaling of the figure.
        2) A checkbox that controls the visibility of the figure's axes.
        3) A toggle button that controls the visibility of all the above, i.e.
           the figure options.

    The structure of the widgets is the following:
        figure_options_wid.children = [toggle_button, figure_scale_slider,
                                       show_axes_checkbox]

    The returned widget saves the selected values in the following dictionary:
        figure_options_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_figure_options()` function.

    Parameters
    ----------
    figure_options_default : `dict`
        The initial selected figure options.
        Example:
            figure_options_default = {'x_scale': 1.,
                                      'y_scale': 1.,
                                      'show_axes': True}

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    figure_scale_bounds : (`float`, `float`), optional
        The range of scales that can be optionally applied to the figure.

    figure_scale_step : `float`, optional
        The step of the scale sliders.

    figure_scale_visible : `boolean`, optional
        The visibility of the figure scales sliders.

    show_axes_visible : `boolean`, optional
        The visibility of the axes checkbox.

    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Create widgets
    # toggle button
    but = ToggleButtonWidget(description='Figure Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # figure_scale, show_axes
    figure_scale = FloatSliderWidget(description='Figure scale:',
                                     value=figure_options_default['x_scale'],
                                     min=figure_scale_bounds[0],
                                     max=figure_scale_bounds[1],
                                     step=figure_scale_step,
                                     visible=figure_scale_visible)
    show_axes = CheckboxWidget(description='Show axes',
                               value=figure_options_default['show_axes'],
                               visible=show_axes_visible)

    # Final widget
    figure_options_wid = ContainerWidget(children=[but, figure_scale,
                                                   show_axes])

    # Assign output
    figure_options_wid.selected_values = figure_options_default

    # get options functions
    def save_show_axes(name, value):
        figure_options_wid.selected_values['show_axes'] = value
    show_axes.on_trait_change(save_show_axes, 'value')

    def save_scale(name, value):
        figure_options_wid.selected_values['x_scale'] = value
        figure_options_wid.selected_values['y_scale'] = value
    figure_scale.on_trait_change(save_scale, 'value')

    # Toggle button function
    def toggle_fun(name, value):
        figure_scale.visible = value
        show_axes.visible = value
    toggle_fun('', toggle_show_default)
    but.on_trait_change(toggle_fun, 'value')

    # assign plot_function
    if plot_function is not None:
        figure_scale.on_trait_change(plot_function, 'value')
        show_axes.on_trait_change(plot_function, 'value')

    return figure_options_wid


def format_figure_options(figure_options_wid, container_padding='6px',
                          container_margin='6px',
                          container_border='1px solid black',
                          toggle_button_font_weight='bold',
                          border_visible=True):
    r"""
    Function that corrects the align (style format) of a given figure_options
    widget. Usage example:
        figure_options_wid = figure_options()
        display(figure_options_wid)
        format_figure_options(figure_options_wid)

    Parameters
    ----------
    figure_options_wid :
        The widget object generated by the `figure_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # fix figure scale slider width
    figure_options_wid.children[1].set_css('width', '3cm')

    # set toggle button font bold
    figure_options_wid.children[0].set_css('font-weight',
                                           toggle_button_font_weight)

    # margin and border around container widget
    figure_options_wid.set_css('padding', container_padding)
    figure_options_wid.set_css('margin', container_margin)
    if border_visible:
        figure_options_wid.set_css('border', container_border)


def update_figure_options(figure_options_wid, figure_options_dict):
    r"""
    Function that updates the state of a given figure_options widget. Usage
    example:
        default_figure_options={'x_scale':1.,
                                'y_scale':1.,
                                'show_axes':True}
        figure_options_wid = figure_options(default_figure_options)
        display(figure_options_wid)
        format_figure_options(figure_options_wid)
        default_figure_options={'x_scale':0.5,
                                'y_scale':0.5,
                                'show_axes':False}
        update_figure_options(figure_options_wid, default_figure_options)

    Parameters
    ----------
    figure_options_wid :
        The widget object generated by the `figure_options()` function.

    figure_options_dict : `dict`
        The new set of options. For example:
            figure_options_dict={'x_scale':1.,
                                 'y_scale':1.,
                                 'show_axes':True}
    """
    # Assign new options dict to selected_values
    figure_options_wid.selected_values = figure_options_dict

    # update show axes checkbox
    if 'show_axes' in figure_options_dict.keys():
        figure_options_wid.children[2].value = figure_options_dict['show_axes']

    # update scale slider
    if 'x_scale' in figure_options_dict.keys():
        figure_options_wid.children[1].value = figure_options_dict['x_scale']
    elif 'y_scale' in figure_options_dict.keys():
        figure_options_wid.children[1].value = figure_options_dict['y_scale']


def figure_options_two_scales(figure_options_default, plot_function=None,
                              coupled_default=False,
                              figure_scales_bounds=(0.1, 2),
                              figure_scales_step=0.1,
                              figure_scales_visible=True,
                              show_axes_visible=True, toggle_show_default=True,
                              toggle_show_visible=True):
    r"""
    Creates a widget with Figure Options. Specifically, it has:
        1) Two sliders that control the horizontal and vertical scaling of the
           figure.
        2) A checkbox that couples/decouples the above sliders.
        3) A checkbox that controls the visibility of the figure's axes.
        4) A toggle button that controls the visibility of all the above, i.e.
           the figure options.

    The structure of the widgets is the following:
        figure_options_wid.children = [toggle_button, figure_scale,
                                       show_axes_checkbox]
        figure_scale.children = [X_scale_slider, Y_scale_slider,
                                 coupled_checkbox]

    The returned widget saves the selected values in the following dictionary:
        figure_options_wid.selected_values

    To fix the alignment within this widget please refer to
    `format_figure_options_two_scales()` function.

    Parameters
    ----------
    figure_options_default : `dict`
        The initial selected figure options.
        Example:
            figure_options_default = {'x_scale': 0.5,
                                      'y_scale': 1.0,
                                      'show_axes': True}

    plot_function : `function` or None, optional
        The plot function that is executed when a widgets' value changes.
        If None, then nothing is assigned.

    coupled_default : `boolean`, optional
        The initial value of the coupled checkbox.

    figure_scale_bounds : (`float`, `float`), optional
        The range of scales that can be optionally applied to the figure.

    figure_scale_step : `float`, optional
        The step of the scale sliders.

    figure_scale_visible : `boolean`, optional
        The visibility of the figure scales sliders.

    show_axes_visible : `boolean`, optional
        The visibility of the axes checkbox.

    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Create widgets
    # toggle button
    but = ToggleButtonWidget(description='Figure Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # figure_scale, show_axes
    x_scale = FloatSliderWidget(description='Figure size: X scale',
                                value=figure_options_default['x_scale'],
                                min=figure_scales_bounds[0],
                                max=figure_scales_bounds[1],
                                step=figure_scales_step)
    y_scale = FloatSliderWidget(description='Y scale',
                                value=figure_options_default['y_scale'],
                                min=figure_scales_bounds[0],
                                max=figure_scales_bounds[1],
                                step=figure_scales_step,
                                disabled=coupled_default)
    coupled = CheckboxWidget(description='Coupled', value=coupled_default)
    show_axes = CheckboxWidget(description='Show axes',
                               value=figure_options_default['show_axes'],
                               visible=show_axes_visible)

    # Final widget
    figure_scale = ContainerWidget(children=[x_scale, y_scale, coupled],
                                   visible=figure_scales_visible)
    figure_options_wid = ContainerWidget(children=[but, figure_scale,
                                                   show_axes])

    # Assign output
    figure_options_wid.selected_values = figure_options_default

    # Coupled sliders function
    def coupled_sliders(name, value):
        y_scale.disabled = value
    coupled_sliders('', coupled_default)
    coupled.on_trait_change(coupled_sliders, 'value')

    # get options functions
    def save_show_axes(name, value):
        figure_options_wid.selected_values['show_axes'] = value
    show_axes.on_trait_change(save_show_axes, 'value')

    def save_x_scale(name, old_value, value):
        figure_options_wid.selected_values['x_scale'] = value
        if coupled.value:
            y_scale.value += value - old_value
    x_scale.on_trait_change(save_x_scale, 'value')

    def save_y_scale(name, value):
        figure_options_wid.selected_values['y_scale'] = value
    y_scale.on_trait_change(save_y_scale, 'value')

    # Toggle button function
    def toggle_fun(name, value):
        figure_scale.visible = value
        show_axes.visible = value
    toggle_fun('', toggle_show_default)
    but.on_trait_change(toggle_fun, 'value')

    # assign plot_function
    if plot_function is not None:
        x_scale.on_trait_change(plot_function, 'value')
        y_scale.on_trait_change(plot_function, 'value')
        show_axes.on_trait_change(plot_function, 'value')

    return figure_options_wid


def format_figure_options_two_scales(figure_options_wid,
                                     container_padding='6px',
                                     container_margin='6px',
                                     container_border='1px solid black',
                                     toggle_button_font_weight='bold',
                                     border_visible=True):
    r"""
    Function that corrects the align (style format) of a given
    figure_options_two_scales widget. Usage example:
        figure_options_wid = figure_options_two_scales()
        display(figure_options_wid)
        format_figure_options_two_scales(figure_options_wid)

    Parameters
    ----------
    figure_options_wid :
        The widget object generated by the `figure_options_two_scales()`
        function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # align figure scale sliders and checkbox
    figure_options_wid.children[1].remove_class('vbox')
    figure_options_wid.children[1].add_class('hbox')

    # fix figure scale sliders width
    figure_options_wid.children[1].children[0].set_css('width', '3cm')
    figure_options_wid.children[1].children[1].set_css('width', '3cm')

    # set toggle button font bold
    figure_options_wid.children[0].set_css('font-weight',
                                           toggle_button_font_weight)

    # margin and border around container widget
    figure_options_wid.set_css('padding', container_padding)
    figure_options_wid.set_css('margin', container_margin)
    if border_visible:
        figure_options_wid.set_css('border', container_border)


def update_figure_options_two_scales(figure_options_wid, figure_options_dict):
    r"""
    Function that updates the state of a given figure_options_two_scales widget.
    Usage example:
        default_figure_options={'x_scale':1.,
                                'y_scale':1.,
                                'show_axes':True}
        figure_options_wid = figure_options_two_scales(default_figure_options)
        display(figure_options_wid)
        format_figure_options_two_scales(figure_options_wid)
        default_figure_options={'x_scale':0.8,
                                'y_scale':0.2,
                                'show_axes':False}
        update_figure_options_two_scales(figure_options_wid,
                                         default_figure_options)

    Parameters
    ----------
    figure_options_wid :
        The widget object generated by the `figure_options_two_scales()`
        function.

    figure_options_dict : `dict`
        The new set of options. For example:
            figure_options_dict={'x_scale':1.,
                                 'y_scale':1.,
                                 'show_axes':True}
    """
    # Assign new options dict to selected_values
    figure_options_wid.selected_values = figure_options_dict

    # update show axes checkbox
    if 'show_axes' in figure_options_dict.keys():
        figure_options_wid.children[2].value = figure_options_dict['show_axes']

    # update scale slider
    if ('x_scale' in figure_options_dict.keys() and
            'y_scale' not in figure_options_dict.keys()):
        figure_options_wid.children[1].children[0].value = \
            figure_options_dict['x_scale']
        figure_options_wid.children[1].children[2].value = False
    elif ('x_scale' not in figure_options_dict.keys() and
            'y_scale' in figure_options_dict.keys()):
        figure_options_wid.children[1].children[1].value = \
            figure_options_dict['y_scale']
        figure_options_wid.children[1].children[2].value = False
    elif ('x_scale' in figure_options_dict.keys() and
            'y_scale' in figure_options_dict.keys()):
        figure_options_wid.children[1].children[0].value = \
            figure_options_dict['x_scale']
        figure_options_wid.children[1].children[1].value = \
            figure_options_dict['y_scale']
        figure_options_wid.children[1].children[2].value = \
            figure_options_dict['x_scale'] == figure_options_dict['y_scale']


def hog_options(toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget with HOG Features Options.

    The structure of the widgets is the following:
        hog_options_wid.children = [toggle_button, options]
        options.children = [window_wid, algorithm_wid]
        window_wid.children = [mode_wid, window_opts_wid]
        mode_wid.children = [mode_radiobuttons, padding_checkbox]
        window_opts_wid.children = [window_size_wid, window_step_wid]
        window_size_wid.children = [window_height, window_width,
                                    window_size_unit]
        window_step_wid.children = [window_vertical, window_horizontal,
                                    window_step_unit]
        algorithm_wid.children = [algorithm_radiobuttons, algorithm_options]
        algorithm_options.children = [algorithm_sizes, algorithm_other]
        algorithm_sizes.children = [cell_size, block_size, num_bins]
        algorithm_other.children = [signed_gradient, l2_norm_clipping]

    To fix the alignment within this widget please refer to
    `format_hog_options()` function.

    Parameters
    ----------
    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Toggle button that controls options' visibility
    but = ToggleButtonWidget(description='HOG Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # window related options
    tmp = OrderedDict()
    tmp['Dense'] = 'dense'
    tmp['Sparse'] = 'sparse'
    mode = RadioButtonsWidget(values=tmp, description='Mode')
    padding = CheckboxWidget(value=True, description='Padding')
    mode_wid = ContainerWidget(children=[mode, padding])
    window_height = BoundedIntTextWidget(value='1', description='Height', min=1)
    window_width = BoundedIntTextWidget(value='1', description='Width', min=1)
    tmp = OrderedDict()
    tmp['Blocks'] = 'blocks'
    tmp['Pixels'] = 'pixels'
    window_size_unit = RadioButtonsWidget(values=tmp, description=' Size unit')
    window_size_wid = ContainerWidget(children=[window_height, window_width,
                                                window_size_unit])
    window_vertical = BoundedIntTextWidget(value='1', description='Step Y',
                                           min=1)
    window_horizontal = BoundedIntTextWidget(value='1', description='Step X',
                                             min=1)
    tmp = OrderedDict()
    tmp['Pixels'] = 'pixels'
    tmp['Cells'] = 'cells'
    window_step_unit = RadioButtonsWidget(values=tmp, description='Step unit')
    window_step_wid = ContainerWidget(children=[window_vertical,
                                                window_horizontal,
                                                window_step_unit])
    window_wid = ContainerWidget(children=[window_size_wid, window_step_wid])
    window_wid = ContainerWidget(children=[mode_wid, window_wid])

    # algorithm related options
    tmp = OrderedDict()
    tmp['Dalal & Triggs'] = 'dalaltriggs'
    tmp['Zhu & Ramanan'] = 'zhuramanan'
    algorithm = RadioButtonsWidget(values=tmp, value='dalaltriggs',
                                   description='Algorithm')
    cell_size = BoundedIntTextWidget(value='8',
                                     description='Cell size (in pixels)', min=1)
    block_size = BoundedIntTextWidget(value='2',
                                      description='Block size (in cells)',
                                      min=1)
    num_bins = BoundedIntTextWidget(value='9', description='Orientation bins',
                                    min=1)
    algorithm_sizes = ContainerWidget(children=[cell_size, block_size,
                                                num_bins])
    signed_gradient = CheckboxWidget(value=True, description='Signed gradients')
    l2_norm_clipping = BoundedFloatTextWidget(value='0.2',
                                              description='L2 norm clipping',
                                              min=0.)
    algorithm_other = ContainerWidget(children=[signed_gradient,
                                                l2_norm_clipping])
    algorithm_options = ContainerWidget(children=[algorithm_sizes,
                                                  algorithm_other])
    algorithm_wid = ContainerWidget(children=[algorithm, algorithm_options])

    # options tab widget
    all_options = TabWidget(children=[window_wid, algorithm_wid])

    # Widget container
    hog_options_wid = ContainerWidget(children=[but, all_options])

    # Initialize output dictionary
    hog_options_wid.options = {'mode': 'dense', 'algorithm': 'dalaltriggs',
                               'num_bins': 9, 'cell_size': 8, 'block_size': 2,
                               'signed_gradient': True, 'l2_norm_clip': 0.2,
                               'window_height': 1, 'window_width': 1,
                               'window_unit': 'blocks',
                               'window_step_vertical': 1,
                               'window_step_horizontal': 1,
                               'window_step_unit': 'pixels', 'padding': True,
                               'verbose': False}

    # mode function
    def window_mode(name, value):
        window_horizontal.disabled = value == 'sparse'
        window_vertical.disabled = value == 'sparse'
        window_step_unit.disabled = value == 'sparse'
        window_height.disabled = value == 'sparse'
        window_width.disabled = value == 'sparse'
        window_size_unit.disabled = value == 'sparse'
    mode.on_trait_change(window_mode, 'value')

    # algorithm function
    def algorithm_mode(name, value):
        l2_norm_clipping.disabled = value == 'zhuramanan'
        signed_gradient.disabled = value == 'zhuramanan'
        block_size.disabled = value == 'zhuramanan'
        num_bins.disabled = value == 'zhuramanan'
    algorithm.on_trait_change(algorithm_mode, 'value')

    # get options
    def get_mode(name, value):
        hog_options_wid.options['mode'] = value
    mode.on_trait_change(get_mode, 'value')

    def get_padding(name, value):
        hog_options_wid.options['padding'] = value
    padding.on_trait_change(get_padding, 'value')

    def get_window_height(name, value):
        hog_options_wid.options['window_height'] = value
    window_height.on_trait_change(get_window_height, 'value')

    def get_window_width(name, value):
        hog_options_wid.options['window_width'] = value
    window_width.on_trait_change(get_window_width, 'value')

    def get_window_size_unit(name, value):
        hog_options_wid.options['window_unit'] = value
    window_size_unit.on_trait_change(get_window_size_unit, 'value')

    def get_window_step_vertical(name, value):
        hog_options_wid.options['window_step_vertical'] = value
    window_vertical.on_trait_change(get_window_step_vertical, 'value')

    def get_window_step_horizontal(name, value):
        hog_options_wid.options['window_step_horizontal'] = value
    window_horizontal.on_trait_change(get_window_step_horizontal, 'value')

    def get_window_step_unit(name, value):
        hog_options_wid.options['window_step_unit'] = value
    window_step_unit.on_trait_change(get_window_step_unit, 'value')

    def get_algorithm(name, value):
        hog_options_wid.options['algorithm'] = value
    algorithm.on_trait_change(get_algorithm, 'value')

    def get_num_bins(name, value):
        hog_options_wid.options['num_bins'] = value
    num_bins.on_trait_change(get_num_bins, 'value')

    def get_cell_size(name, value):
        hog_options_wid.options['cell_size'] = value
    cell_size.on_trait_change(get_cell_size, 'value')

    def get_block_size(name, value):
        hog_options_wid.options['block_size'] = value
    block_size.on_trait_change(get_block_size, 'value')

    def get_signed_gradient(name, value):
        hog_options_wid.options['signed_gradient'] = value
    signed_gradient.on_trait_change(get_signed_gradient, 'value')

    def get_l2_norm_clip(name, value):
        hog_options_wid.options['l2_norm_clip'] = value
    l2_norm_clipping.on_trait_change(get_l2_norm_clip, 'value')

    # Toggle button function
    def toggle_options(name, value):
        all_options.visible = value
    but.on_trait_change(toggle_options, 'value')

    return hog_options_wid


def format_hog_options(hog_options_wid, container_padding='6px',
                       container_margin='6px',
                       container_border='1px solid black',
                       toggle_button_font_weight='bold',
                       border_visible=True):
    r"""
    Function that corrects the align (style format) of a given hog_options
    widget. Usage example:
        hog_options_wid = hog_options()
        display(hog_options_wid)
        format_hog_options(hog_options_wid)

    Parameters
    ----------
    hog_options_wid :
        The widget object generated by the `hog_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    tab_top_margin : `str`, optional
        The margin around the tab options' widget, e.g. '0.3cm'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # align window options
    hog_options_wid.children[1].children[0].children[1].remove_class('vbox')
    hog_options_wid.children[1].children[0].children[1].add_class('hbox')

    # set width of height, width, step x , step y textboxes
    hog_options_wid.children[1].children[0].children[1].children[0].children[0].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[0].children[1].children[0].children[1].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[0].children[1].children[1].children[0].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[0].children[1].children[1].children[1].\
        set_css('width', '40px')

    # set margin and border around the window size and step options
    hog_options_wid.children[1].children[0].children[1].children[0].set_css(
        'margin', container_margin)
    hog_options_wid.children[1].children[0].children[1].children[1].set_css(
        'margin', container_margin)
    hog_options_wid.children[1].children[0].children[1].children[0].set_css(
        'border', '1px solid gray')
    hog_options_wid.children[1].children[0].children[1].children[1].set_css(
        'border', '1px solid gray')

    # align mode and padding
    hog_options_wid.children[1].children[0].children[0].remove_class('vbox')
    hog_options_wid.children[1].children[0].children[0].add_class('hbox')

    # set width of algorithm textboxes
    hog_options_wid.children[1].children[1].children[1].children[0].children[0].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[1].children[1].children[0].children[1].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[1].children[1].children[0].children[2].\
        set_css('width', '40px')
    hog_options_wid.children[1].children[1].children[1].children[1].children[1].\
        set_css('width', '40px')

    # align algorithm options
    hog_options_wid.children[1].children[1].children[1].remove_class('vbox')
    hog_options_wid.children[1].children[1].children[1].add_class('hbox')

    # set margin and border around the algorithm options
    hog_options_wid.children[1].children[1].children[1].set_css(
        'margin', container_margin)
    hog_options_wid.children[1].children[1].children[1].set_css(
        'border', '1px solid gray')

    hog_options_wid.children[1].set_css('margin-top', '6px')
    hog_options_wid.children[1].children[0].add_class('align-center')
    hog_options_wid.children[1].children[1].add_class('align-center')

    # set final tab titles
    tab_titles = ['Window', 'Algorithm']
    for (k, tl) in enumerate(tab_titles):
        hog_options_wid.children[1].set_title(k, tl)

    # set toggle button font bold
    hog_options_wid.children[0].set_css('font-weight',
                                        toggle_button_font_weight)

    # margin and border around container widget
    hog_options_wid.set_css('padding', container_padding)
    hog_options_wid.set_css('margin', container_margin)
    if border_visible:
        hog_options_wid.set_css('border', container_border)


def daisy_options(toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget with Daisy Features Options.

    The structure of the widgets is the following:
        daisy_options_wid.children = [toggle_button, options]
        options.children = [options1, options2]
        options1.children = [step_int, radius_int, rings_int, histograms_int]
        options2.children = [orientations_int, normalization_dropdown,
                             sigmas_list, ring_radii_list]

    To fix the alignment within this widget please refer to
    `format_daisy_options()` function.

    Parameters
    ----------
    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Toggle button that controls options' visibility
    but = ToggleButtonWidget(description='Daisy Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # options widgets
    step = BoundedIntTextWidget(value='1', description='Step', min=1)
    radius = BoundedIntTextWidget(value='15', description='Radius', min=1)
    rings = BoundedIntTextWidget(value='2', description='Rings', min=1)
    histograms = BoundedIntTextWidget(value='2', description='Histograms',
                                      min=1)
    orientations = BoundedIntTextWidget(value='8', description='Orientations',
                                        min=1)
    tmp = OrderedDict()
    tmp['L1'] = 'l1'
    tmp['L2'] = 'l2'
    tmp['Daisy'] = 'daisy'
    tmp['None'] = None
    normalization = DropdownWidget(value='l1', values=tmp,
                                   description='Normalization')
    sigmas = TextWidget(description='Sigmas')
    ring_radii = TextWidget(description='Ring radii')

    # group widgets
    cont1 = ContainerWidget(children=[step, radius, rings, histograms])
    cont2 = ContainerWidget(children=[orientations, normalization, sigmas,
                                      ring_radii])
    options = ContainerWidget(children=[cont1, cont2])

    # Widget container
    daisy_options_wid = ContainerWidget(children=[but, options])

    # Initialize output dictionary
    daisy_options_wid.options = {'step': 1, 'radius': 15,
                                 'rings': 2, 'histograms': 2,
                                 'orientations': 8,
                                 'normalization': 'l1',
                                 'sigmas': None,
                                 'ring_radii': None}

    # get options
    def get_step(name, value):
        daisy_options_wid.options['step'] = value
    step.on_trait_change(get_step, 'value')

    def get_radius(name, value):
        daisy_options_wid.options['radius'] = value
    radius.on_trait_change(get_radius, 'value')

    def get_rings(name, value):
        daisy_options_wid.options['rings'] = value
    rings.on_trait_change(get_rings, 'value')

    def get_histograms(name, value):
        daisy_options_wid.options['histograms'] = value
    histograms.on_trait_change(get_histograms, 'value')

    def get_orientations(name, value):
        daisy_options_wid.options['orientations'] = value
    orientations.on_trait_change(get_orientations, 'value')

    def get_normalization(name, value):
        daisy_options_wid.options['normalization'] = value
    normalization.on_trait_change(get_normalization, 'value')

    def get_sigmas(name, value):
        daisy_options_wid.options['sigmas'] = _convert_str_to_list_int(str(value))
    sigmas.on_trait_change(get_sigmas, 'value')

    def get_ring_radii(name, value):
        daisy_options_wid.options['ring_radii'] = _convert_str_to_list_float(str(value))
    ring_radii.on_trait_change(get_ring_radii, 'value')

    # Toggle button function
    def toggle_options(name, value):
        options.visible = value
    but.on_trait_change(toggle_options, 'value')

    return daisy_options_wid


def format_daisy_options(daisy_options_wid, container_padding='6px',
                         container_margin='6px',
                         container_border='1px solid black',
                         toggle_button_font_weight='bold',
                         border_visible=True):
    r"""
    Function that corrects the align (style format) of a given daisy_options
    widget. Usage example:
        daisy_options_wid = daisy_options()
        display(daisy_options_wid)
        format_daisy_options(daisy_options_wid)

    Parameters
    ----------
    daisy_options_wid :
        The widget object generated by the `daisy_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    tab_top_margin : `str`, optional
        The margin around the tab options' widget, e.g. '0.3cm'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # align window options
    daisy_options_wid.children[1].remove_class('vbox')
    daisy_options_wid.children[1].add_class('hbox')

    # set textboxes length
    daisy_options_wid.children[1].children[0].children[0].set_css('width',
                                                                  '40px')
    daisy_options_wid.children[1].children[0].children[1].set_css('width',
                                                                  '40px')
    daisy_options_wid.children[1].children[0].children[2].set_css('width',
                                                                  '40px')
    daisy_options_wid.children[1].children[0].children[3].set_css('width',
                                                                  '40px')
    daisy_options_wid.children[1].children[1].children[0].set_css('width',
                                                                  '40px')
    daisy_options_wid.children[1].children[1].children[2].set_css('width',
                                                                  '80px')
    daisy_options_wid.children[1].children[1].children[3].set_css('width',
                                                                  '80px')

    # set toggle button font bold
    daisy_options_wid.children[0].set_css('font-weight',
                                          toggle_button_font_weight)

    # margin and border around container widget
    daisy_options_wid.set_css('padding', container_padding)
    daisy_options_wid.set_css('margin', container_margin)
    if border_visible:
        daisy_options_wid.set_css('border', container_border)


def lbp_options(toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget with LBP Features Options.

    The structure of the widgets is the following:
        lbp_options_wid.children = [toggle_button, options]
        options.children = [window_wid, algorithm_wid]
        window_wid.children = [window_vertical, window_horizontal,
                               window_step_unit, padding]
        algorithm_wid.children = [mapping_type, radius, samples]

    To fix the alignment within this widget please refer to
    `format_lbp_options()` function.

    Parameters
    ----------
    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Toggle button that controls options' visibility
    but = ToggleButtonWidget(description='LBP Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # method related options
    tmp = OrderedDict()
    tmp['Uniform-2'] = 'u2'
    tmp['Rotation-Invariant'] = 'ri'
    tmp['Both'] = 'riu2'
    tmp['None'] = 'none'
    mapping_type = DropdownWidget(value='u2', values=tmp,
                                  description='Mapping')
    radius = TextWidget(value='1, 2, 3, 4', description='Radius')
    samples = TextWidget(value='8, 8, 8, 8', description='Samples')
    algorithm_wid = ContainerWidget(children=[radius,
                                              samples,
                                              mapping_type])

    # window related options
    window_vertical = BoundedIntTextWidget(value='1', description='Step Y',
                                           min=1)
    window_horizontal = BoundedIntTextWidget(value='1', description='Step X',
                                             min=1)
    tmp = OrderedDict()
    tmp['Pixels'] = 'pixels'
    tmp['Windows'] = 'cells'
    window_step_unit = RadioButtonsWidget(values=tmp, description='Step unit')
    padding = CheckboxWidget(value=True, description='Padding')
    window_wid = ContainerWidget(children=[window_vertical,
                                           window_horizontal,
                                           window_step_unit,
                                           padding])

    # options widget
    options = ContainerWidget(children=[window_wid, algorithm_wid])

    # Widget container
    lbp_options_wid = ContainerWidget(children=[but, options])

    # Initialize output dictionary
    lbp_options_wid.options = {'radius': range(1, 5), 'samples': [8]*4,
                               'mapping_type': 'u2',
                               'window_step_vertical': 1,
                               'window_step_horizontal': 1,
                               'window_step_unit': 'pixels', 'padding': True,
                               'verbose': False, 'skip_checks': False}

    # get options
    def get_mapping_type(name, value):
        lbp_options_wid.options['mapping_type'] = value
    mapping_type.on_trait_change(get_mapping_type, 'value')

    def get_window_vertical(name, value):
        lbp_options_wid.options['window_step_vertical'] = value
    window_vertical.on_trait_change(get_window_vertical, 'value')

    def get_window_horizontal(name, value):
        lbp_options_wid.options['window_step_horizontal'] = value
    window_horizontal.on_trait_change(get_window_horizontal, 'value')

    def get_window_step_unit(name, value):
        lbp_options_wid.options['window_step_unit'] = value
    window_step_unit.on_trait_change(get_window_step_unit, 'value')

    def get_padding(name, value):
        lbp_options_wid.options['padding'] = value
    padding.on_trait_change(get_padding, 'value')

    def get_radius(name, value):
        lbp_options_wid.options['radius'] = _convert_str_to_list_int(str(value))
    radius.on_trait_change(get_radius, 'value')

    def get_samples(name, value):
        lbp_options_wid.options['samples'] = _convert_str_to_list_int(str(value))
    samples.on_trait_change(get_samples, 'value')

    # Toggle button function
    def toggle_options(name, value):
        options.visible = value
    but.on_trait_change(toggle_options, 'value')

    return lbp_options_wid


def format_lbp_options(lbp_options_wid, container_padding='6px',
                       container_margin='6px',
                       container_border='1px solid black',
                       toggle_button_font_weight='bold',
                       border_visible=True):
    r"""
    Function that corrects the align (style format) of a given lbp_options
    widget. Usage example:
        lbp_options_wid = lbp_options()
        display(lbp_options_wid)
        format_lbp_options(lbp_options_wid)

    Parameters
    ----------
    lbp_options_wid :
        The widget object generated by the `lbp_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    tab_top_margin : `str`, optional
        The margin around the tab options' widget, e.g. '0.3cm'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # align window options
    lbp_options_wid.children[1].remove_class('vbox')
    lbp_options_wid.children[1].add_class('hbox')

    # set textboxes length
    lbp_options_wid.children[1].children[0].children[0].set_css('width',
                                                                '40px')
    lbp_options_wid.children[1].children[0].children[1].set_css('width',
                                                                '40px')
    lbp_options_wid.children[1].children[1].children[0].set_css('width',
                                                                '80px')
    lbp_options_wid.children[1].children[1].children[1].set_css('width',
                                                                '80px')

    # set toggle button font bold
    lbp_options_wid.children[0].set_css('font-weight',
                                        toggle_button_font_weight)

    # margin and border around container widget
    lbp_options_wid.set_css('padding', container_padding)
    lbp_options_wid.set_css('margin', container_margin)
    if border_visible:
        lbp_options_wid.set_css('border', container_border)


def igo_options(toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget with IGO Features Options.

    The structure of the widgets is the following:
        igo_options_wid.children = [toggle_button, double_angles_checkbox]

    To fix the alignment within this widget please refer to
    `format_igo_options()` function.

    Parameters
    ----------
    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Toggle button that controls options' visibility
    but = ToggleButtonWidget(description='IGO Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # options widget
    double_angles = CheckboxWidget(value=False, description='Double angles')

    # Widget container
    igo_options_wid = ContainerWidget(children=[but, double_angles])

    # Initialize output dictionary
    igo_options_wid.options = {'double_angles': False}

    # get double_angles
    def get_double_angles(name, value):
        igo_options_wid.options['double_angles'] = value
    double_angles.on_trait_change(get_double_angles, 'value')

    # Toggle button function
    def toggle_options(name, value):
        double_angles.visible = value
    but.on_trait_change(toggle_options, 'value')

    return igo_options_wid


def format_igo_options(igo_options_wid, container_padding='6px',
                       container_margin='6px',
                       container_border='1px solid black',
                       toggle_button_font_weight='bold',
                       border_visible=True):
    r"""
    Function that corrects the align (style format) of a given igo_options
    widget. Usage example:
        igo_options_wid = igo_options()
        display(igo_options_wid)
        format_igo_options(igo_options_wid)

    Parameters
    ----------
    igo_options_wid :
        The widget object generated by the `igo_options()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    tab_top_margin : `str`, optional
        The margin around the tab options' widget, e.g. '0.3cm'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # set toggle button font bold
    igo_options_wid.children[0].set_css('font-weight',
                                        toggle_button_font_weight)

    # margin and border around container widget
    igo_options_wid.set_css('padding', container_padding)
    igo_options_wid.set_css('margin', container_margin)
    if border_visible:
        igo_options_wid.set_css('border', container_border)


def function_definition(default_function='def my_function():\n    pass',
                        toggle_show_default=True, toggle_show_visible=True):
    r"""
    Creates a widget for Function Definition.

    The structure of the widgets is the following:
        function_definition_wid.children = [toggle_button, options]
        options.children = [code_textarea, define]
        define.children = [message_text, define_button]

    To fix the alignment within this widget please refer to
    `format_function_definition()` function.

    Parameters
    ----------
    toggle_show_default : `boolean`, optional
        Defines whether the options will be visible upon construction.

    toggle_show_visible : `boolean`, optional
        The visibility of the toggle button.
    """
    # Toggle button that controls options' visibility
    but = ToggleButtonWidget(description='Features Options',
                             value=toggle_show_default,
                             visible=toggle_show_visible)

    # code widget
    code = TextareaWidget(value=default_function)
    define_but = ButtonWidget(description='Define')
    msg_wid = LatexWidget(value='')
    define_wid = ContainerWidget(children=[msg_wid, define_but])

    # options widget
    all_options = ContainerWidget(children=[code, define_wid])

    # Widget container
    function_definition_wid = ContainerWidget(children=[but, all_options])

    # Initialize output dictionary
    f, msg = _get_function_handle_from_string(default_function)
    function_definition_wid.function = f

    # get code
    def get_code(name):
        function_handle, msg = _get_function_handle_from_string(code.value)
        if function_handle is not None:
            function_definition_wid.function = function_handle
            msg_wid.value = ''
        else:
            f, _ = _get_function_handle_from_string(default_function)
            function_definition_wid.function = f
            msg_wid.value = msg
    define_but.on_click(get_code)

    # Toggle button function
    def toggle_options(name, value):
        all_options.visible = value
    but.on_trait_change(toggle_options, 'value')

    return function_definition_wid


def format_function_definition(function_definition_wid, container_padding='6px',
                               container_margin='6px',
                               container_border='1px solid black',
                               toggle_button_font_weight='bold',
                               border_visible=True):
    r"""
    Function that corrects the align (style format) of a given features_options
    widget. Usage example:
        function_definition_wid = function_definition()
        display(function_definition_wid)
        format_function_definition(function_definition_wid)

    Parameters
    ----------
    function_definition_wid :
        The widget object generated by the `function_definition()` function.

    container_padding : `str`, optional
        The padding around the widget, e.g. '6px'

    container_margin : `str`, optional
        The margin around the widget, e.g. '6px'

    tab_top_margin : `str`, optional
        The margin around the tab options' widget, e.g. '0.3cm'

    container_border : `str`, optional
        The border around the widget, e.g. '1px solid black'

    toggle_button_font_weight : `str`
        The font weight of the toggle button, e.g. 'bold'

    border_visible : `boolean`, optional
        Defines whether to draw the border line around the widget.
    """
    # align message text and button horizontally
    function_definition_wid.children[1].children[1].remove_class('vbox')
    function_definition_wid.children[1].children[1].add_class('hbox')

    # set margin between message and button
    function_definition_wid.children[1].children[1].children[0].set_css(
        'margin-right', '0.5cm')

    # align code textarea and button to the right
    function_definition_wid.children[1].add_class('align-end')

    # set error message background to red
    function_definition_wid.children[1].children[1].children[0].set_css(
        'background', 'red')

    # set toggle button font bold
    function_definition_wid.children[0].set_css('font-weight',
                                                toggle_button_font_weight)

    # margin and border around container widget
    function_definition_wid.set_css('padding', container_padding)
    function_definition_wid.set_css('margin', container_margin)
    if border_visible:
        function_definition_wid.set_css('border', container_border)


def _get_function_handle_from_string(s):
    r"""
    Function that returns a function handle given the function code as a string.
    """
    try:
        exec(s)
        function_name = s[4:s.find('(')]
        return eval(function_name), None
    except:
        return None, 'Invalid syntax!'


def _convert_image_to_bytes(image):
    r"""
    Function that given a menpo.Image object, it converts it to the correct
    bytes format that can be used by IPython.html.widgets.ImageWidget().
    """
    fp = StringIO()
    image.as_PILImage().save(fp, format='png')
    fp.seek(0)
    return fp.read()
